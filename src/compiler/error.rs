//! A basic skeleton type for all errors about user input that are generated
//! by the compiler.  The [`CompilerError`] contains information about the
//! location within source code that caused the error and an inner error type
//! that is a more refined and compiler stage specific error type.
//!
//! Because every error generated by the compiler must be associated with a
//! subset of the input source code, that is lifted into this global wrapper
//! type and more specific error information is reserved of the inner error.
//!
//! This also defines the CompilerDisplay trait which all inner errors must
//! implement.  The CompilerDisplay trait handles converting an Error type to
//! a human readable format and also handles converting internal representations
//! to human readable representations (e.g. the StringId is converted to the
//! actual string).

#![macro_use]
use crate::StringTable;

use super::{CompilerDisplay, CompilerDisplayError, SourceMap, Span};

/// Represents all errors that are generated from within the Compiler
/// module and its submodules.
///
/// This type captures common metadata which is necessarily present for
/// all errors which are caused by input source code.  E.g. the line #
/// that the error occurs on. This also handles formatting all error messages
/// with the universal metadata along with the inner metadata.
///
/// The inner error allows metadata which is specific to a submodule within
/// the compiler. E.g., the errors themselves are submodule specific and
/// are stored in the `inner` field.
#[derive(Clone, Debug, PartialEq)]
pub struct CompilerError<IE: CompilerDisplay> {
    /// The line in the source code which caused the error
    line: u32,

    /// The span of source code that caused this error
    span: Span,

    /// An inner error value that contains more specific error information
    inner: IE,
}

impl<IE> CompilerError<IE>
where
    IE: CompilerDisplay,
{
    pub fn new(line: u32, span: Span, inner: IE) -> Self {
        CompilerError { line, span, inner }
    }

    /// Moves the Line number and Inner error out of the wrapping [CompilerError].
    /// This is to allow conversion of one type of [CompilerError] to another type, by
    /// converting the `inner` type into a new type and then creating a new [CompilerError]
    /// wrapper.
    pub fn take(self) -> (u32, Span, IE) {
        (self.line, self.span, self.inner)
    }
}

impl<IE> CompilerDisplay for CompilerError<IE>
where
    IE: CompilerDisplay,
{
    fn fmt(&self, sm: &SourceMap, st: &StringTable) -> Result<String, CompilerDisplayError> {
        let inner = self.inner.fmt(sm, st)?;

        //let lines = sm.lines(self.span);
        //let line = lines[0].1[0];

        Ok(format!("L{}: {}", self.line, inner))
    }
}

/// Helper macro to get rid of repitition of boilerplate code.
//#[macro_export]
macro_rules! err {
    ($ln: expr, $span:expr, $kind: expr) => {
        Err(CompilerError::new($ln, $span, $kind))
    };
}
